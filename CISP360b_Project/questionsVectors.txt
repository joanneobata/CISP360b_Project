99. V.size( ); prints V length100. [ ] is used to read or change the value at vectors' index position101. .clear ( ); removes all elements from vector and replaces with 0's102. [ ] can be used to initialize vector103. pop_back ( ); adds last element in vector;104. swap(v[num1], v[num2]) swaps two values in a vector at positions num1 and num2105. v.assign(size, val) modifies the vector to be the size size and all elements have the value val106. v.at(pos) returns value of v at position pos107. v.back() refers to last element of v108. v.clear() empties vector v, returns empty vector v109. v.empty() true if the vector is empty of v110. v.front() refers to first element of v111. v.length() returns size of vector112. v.pop_back() removes last element of v113. v.push_back(val) appends val to end of v114. v.resize(newsize, val) changes size of vector and puts val in any new elements115. v.resize(newsize) changes size of vector to newsize116. v.size() returns size of vector117. v.swap(v2) swaps contents of v and v2118. vector <int> v; creates an empty vector with base type int;119. vectors' starting index is 1120. Vector details of memory management are hidden122. Dynamic arrays can grow in size while program is executing, static arrays cannot. Static size must be known before runtime.123. Dynamically allocated variables must be deleted to free the memory.124. Name of a dynamic array is pointer to first element in the array125. The length of the array needs to be constant before declaration126. Name of a static array constant is a pointer to the first element in the array127. & is an address of operator. It returns the memory address of a variable128. To declare a dynamic array type *array_name129. With dynamic allocation, the "new" operator is required to declare a variable on the heap. Then it must be deleted130. Use delete[] d_a; to delete Dynamic Array double* d_a = new double[n];131. Vectors are a Standard Library facility, and not a built-in part of the core language